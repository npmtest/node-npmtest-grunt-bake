{"/home/travis/build/npmtest/node-npmtest-grunt-bake/test.js":"/* istanbul instrument in package npmtest_grunt_bake */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bake/lib.npmtest_grunt_bake.js":"/* istanbul instrument in package npmtest_grunt_bake */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_bake = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_bake = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bake/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-bake && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_bake */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_bake\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_bake.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_bake.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_bake.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_bake.__dirname + '/lib.npmtest_grunt_bake.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bake/node_modules/grunt-bake/Gruntfile.js":"/*\n * grunt-bake\n *\n * Copyright (c) 2013 Mathias Paumgarten\n * Licensed under the MIT license.\n */\n\n\"use strict\";\n\nfunction parseFunction( source ) {\n\treturn source.replace( /\\{\\{\\s?([\\.\\-\\w]*)\\s?\\}\\}/g, function() {\n\t\treturn \"\";\n\t} );\n}\n\nmodule.exports = function(grunt) {\n\n\tgrunt.initConfig( {\n\t\tjshint: {\n\t\t\tall: [\n\t\t\t\t\"Gruntfile.js\",\n\t\t\t\t\"tasks/*.js\",\n\t\t\t\t\"<%= nodeunit.tests %>\",\n\t\t\t],\n\t\t\toptions: {\n\t\t\t\tjshintrc: \".jshintrc\",\n\t\t\t},\n\t\t},\n\n\t\tjsonlint: {\n\t\t\tconfig: {\n\t\t\t\tsrc: [ \"package.json\" ]\n\t\t\t}\n\t\t},\n\n\t\tclean: [ \"tmp\" ],\n\n\t\tnodeunit: {\n\t\t\ttests: [ \"test/*_test.js\" ],\n\t\t},\n\n\t\twatch: {\n\t\t\tjshint: {\n\t\t\t\tfiles: [\n\t\t\t\t\t\"Gruntfile.js\",\n\t\t\t\t\t\"tasks/*.js\",\n\t\t\t\t\t\"<%= nodeunit.tests %>\",\n\t\t\t\t],\n\t\t\t\ttasks: [ \"jshint\" ]\n\t\t\t},\n\t\t\tjsonlint: {\n\t\t\t\tfiles: [ \"package.json\" ],\n\t\t\t\ttasks: [ \"jsonlint\" ]\n\t\t\t},\n\t\t\ttest: {\n\t\t\t\tfiles: [\n\t\t\t\t\t\"tasks/*.js\",\n\t\t\t\t\t\"<%= nodeunit.tests %>\",\n\t\t\t\t],\n\t\t\t\ttasks: [ \"jshint\", \"test\" ]\n\t\t\t}\n\t\t},\n\n\t\tbake: {\n\n\t\t\tdefault_bake: {\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/default_bake.html\": \"test/fixtures/default_bake.html\"\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tadvanced_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"en\"\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/advanced_bake.html\": \"test/fixtures/advanced_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tadvanced_bake_multi: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"en\"\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/advanced_bake_multi_one.html\": \"test/fixtures/advanced_bake_multi_one.html\",\n\t\t\t\t\t\"tmp/advanced_bake_multi_two.html\": \"test/fixtures/advanced_bake_multi_two.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tobject_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\"title\": \"A Title\",\n\t\t\t\t\t\t\"info\": {\n\t\t\t\t\t\t\t\"author\": \"Mike\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/object_bake.html\": \"test/fixtures/advanced_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcostum_process_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"de\",\n\t\t\t\t\tprocess: parseFunction\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/costum_process_bake.html\": \"test/fixtures/advanced_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\trecursive_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"en\",\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/recursive_bake.html\": \"test/fixtures/recursive_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tinline_recursive_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\"\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/inline_recursive_bake.html\": \"test/fixtures/inline_recursive_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tinline_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"en\"\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/inline_bake.html\": \"test/fixtures/inline_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabsolute_path_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tbasePath: \"test/fixtures/includes\"\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/absolute_path_bake.html\": \"test/fixtures/absolute_path_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdefault_absolute_path_bake: {\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/default_absolute_path_bake.html\": \"test/fixtures/default_absolute_path_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tif_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"en\"\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/if_bake.html\": \"test/fixtures/if_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsemantic_if: {\n\t\t\t\toptions: {\n\t\t\t\t\tsemanticIf: true\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/semantic_if.html\": \"test/fixtures/semantic_if.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tformat_bake: {\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/format_bake.html\": \"test/fixtures/format_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tforeach_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"en\"\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/foreach_bake.html\": \"test/fixtures/foreach_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tforeach_inline_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"en\"\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/foreach-inline_bake.html\": \"test/fixtures/foreach-inline_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tforeach_meta: {\n\t\t\t\toptions: {\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\tvisibleBool: function( state ) {\n\t\t\t\t\t\t\treturn state ? \"is true\" : \"is false\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/foreach_meta.html\": \"test/fixtures/foreach_meta.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tno_process_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tprocess: false\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/no_process_bake.html\": \"test/fixtures/no_process_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsection_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\thome: {\n\t\t\t\t\t\t\ttitle: \"Home\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tabout: {\n\t\t\t\t\t\t\ttitle: \"About\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbooks: {\n\t\t\t\t\t\t\ttheDarkTower: {\n\t\t\t\t\t\t\t\tauthor: \"Stephen King\",\n\t\t\t\t\t\t\t\ttitle: \"The Dark Tower\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/section_bake.html\": \"test/fixtures/section_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\trender_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tfoo: false,\n\t\t\t\t\tbar: true\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/render_bake.html\": \"test/fixtures/render_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\thtml_include_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tfoo: \"<span>Foo</span>\"\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/html_include_bake.html\": \"test/fixtures/html_include_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfunction_content_bake: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: function() {\n\t\t\t\t\t\tvar data = grunt.file.readJSON( \"test/fixtures/content.json\" );\n\n\t\t\t\t\t\tdata.rooms = data.rooms.map( function( room ) {\n\t\t\t\t\t\t\troom.volume = room.width * room.depth * room.height;\n\n\t\t\t\t\t\t\treturn room;\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/function_content_bake.html\": \"test/fixtures/function_content_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttransform_pass_through: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tcontent: \"Hallo Welt!\"\n\t\t\t\t\t},\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\tnoop: function( string ) {\n\t\t\t\t\t\t\treturn string;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/transform_pass_through.html\": \"test/fixtures/transform_pass_through.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttransform_single: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tcontent: \"Hallo Welt!\"\n\t\t\t\t\t},\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\tupper: function( string ) {\n\t\t\t\t\t\t\treturn String( string ).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/transform_single.html\": \"test/fixtures/transform_single.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttransform_params: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\"string\": \"Bake\",\n\t\t\t\t\t\t\t\"array\": [\n\t\t\t\t\t\t\t\t\"Jim\",\n\t\t\t\t\t\t\t\t\"John\",\n\t\t\t\t\t\t\t\t\"James\",\n\t\t\t\t\t\t\t\t\"Jonathan\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\trepeat: function( string, times ) {\n\t\t\t\t\t\t\treturn new Array( parseInt( times, 10) + 1 ).join( String( string ) );\n\t\t\t\t\t\t},\n\t\t\t\t\t\treplace: function( string, searchvalue, newvalue ) {\n\t\t\t\t\t\t\treturn String( string ).replace( searchvalue, newvalue );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmax: function( array, limit ) {\n\t\t\t\t\t\t\treturn array.slice( 0, limit );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tjoin: function( array, glue ) {\n\t\t\t\t\t\t\treturn array.join( glue );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/transform_params.html\": \"test/fixtures/transform_params.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttransform_multiple: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tcontent: \"Hallo\\nWelt!\"\n\t\t\t\t\t},\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\tnl2br: function( string ) {\n\t\t\t\t\t\t\treturn String( string ).replace( /([\\r\\n]+)/g, \"<br />\" );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tupper: function( string ) {\n\t\t\t\t\t\t\treturn String( string ).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/transform_multiple.html\": \"test/fixtures/transform_multiple.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttransform_deep: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tsub: {\n\t\t\t\t\t\t\tsub: {\n\t\t\t\t\t\t\t\tcontent: \"Hallo Welt!\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\tupper: function( string ) {\n\t\t\t\t\t\t\treturn String( string ).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/transform_deep.html\": \"test/fixtures/transform_deep.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttransform_foreach: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\tsection: \"en\",\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\tmax: function( array, limit ) {\n\t\t\t\t\t\t\treturn ( array || [] ).slice( 0, limit );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/transform_foreach.html\": \"test/fixtures/transform_foreach.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tkeep_undefined_vars: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tdefined: \"Hallo Welt!\"\n\t\t\t\t\t},\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\tupper: function( string ) {\n\t\t\t\t\t\t\treturn String( string ).toUpperCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tremoveUndefined: false\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/keep_undefined_vars.html\": \"test/fixtures/keep_undefined_vars.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tmultiline_bake: {\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/multiline_bake.html\": \"test/fixtures/multiline_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tvar_as_array_key: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\"pages\": {\n\t\t\t\t\t\t\t\"page1\": {\n\t\t\t\t\t\t\t\t\"title\": \"Page 1\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"page2\": {\n\t\t\t\t\t\t\t\t\"title\": \"Page 2\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"page3\": {\n\t\t\t\t\t\t\t\t\"title\": \"Page 3\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"page4\": {\n\t\t\t\t\t\t\t\t\"title\": \"Page 4\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"page5\": {\n\t\t\t\t\t\t\t\t\"title\": \"Page 5\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/var_as_array_key.html\": \"test/fixtures/var_as_array_key.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tpath_with_placeholder: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tfilename: \"include-one\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/path_with_placeholder.html\": \"test/fixtures/path_with_placeholder.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\trecursive_path_with_placeholder: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: {\n\t\t\t\t\t\tfilename: \"include-four.html\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/recursive_path_with_placeholder.html\": \"test/fixtures/recursive_path_with_placeholder.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\textra_bake: {\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/extra_bake.html\": \"test/fixtures/extra_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\textra_bake_multiple: {\n\t\t\t\toptions: {\n\t\t\t\t\tcontent: \"test/fixtures/content.json\",\n\t\t\t\t\ttransforms: {\n\t\t\t\t\t\tlowercase: function( string ) {\n\t\t\t\t\t\t\treturn String( string ).toLowerCase();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/extra_bake_multiple.html\": \"test/fixtures/extra_bake_multiple.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tassign_bake: {\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/assign_bake.html\": \"test/fixtures/assign_bake.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tinline_no_process: {\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/inline_no_process.html\": \"test/fixtures/inline_no_process.html\"\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdefault_variables: {\n\t\t\t\tfiles: {\n\t\t\t\t\t\"tmp/default_variables.html\": \"test/fixtures/default_variables.html\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} );\n\n\tgrunt.loadTasks( \"tasks\" );\n\n\tgrunt.loadNpmTasks( \"grunt-contrib-jshint\" );\n\tgrunt.loadNpmTasks( \"grunt-contrib-clean\" );\n\tgrunt.loadNpmTasks( \"grunt-contrib-nodeunit\" );\n\tgrunt.loadNpmTasks( \"grunt-contrib-watch\" );\n\tgrunt.loadNpmTasks( \"grunt-jsonlint\" );\n\n\tgrunt.registerTask( \"test\", [ \"clean\", \"setup\", \"bake\", \"nodeunit\", \"teardown\" ] );\n\tgrunt.registerTask( \"default\", [ \"jsonlint\", \"jshint\", \"test\" ] );\n\n\n\t// Stubbing methods for testing purposes. Because we are good little developers\n\t// we clean up after ourselves.\n\tvar realDateNow;\n\n\tgrunt.registerTask( \"setup\", function() {\n\t\trealDateNow = Date.now;\n\n\t\tDate.now = function() {\n\t\t\treturn 123456789;\n\t\t};\n\t} );\n\n\tgrunt.registerTask( \"teardown\", function() {\n\t\tDate.now = realDateNow;\n\t} );\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-bake/node_modules/grunt-bake/tasks/bake.js":"/*\n * grunt-bake\n * https://github.com/MathiasPaumgarten/grunt-bake\n *\n * Copyright (c) 2013 Mathias Paumgarten\n * Licensed under the MIT license.\n */\n\n\"use strict\";\n\nvar mout = require( \"mout\" );\n\nmodule.exports = function( grunt ) {\n\n\tgrunt.registerMultiTask( \"bake\", \"Bake templates into a file.\", function() {\n\n\t\t// =============\n\t\t// -- OPTIONS --\n\t\t// =============\n\n\t\t// Merging the passed options with the default settingss\n\n\t\tvar options = this.options( {\n\t\t\tcontent: null,\n\t\t\tsection: null,\n\t\t\tsemanticIf: false,\n\t\t\tbasePath: \"\",\n\t\t\ttransforms: {},\n\t\t\tparsePattern: /\\{\\{\\s*([^\\}]+)\\s*\\}\\}/g,\n\t\t\tremoveUndefined: true\n\t\t} );\n\n\n\t\t// warning about removed parameter\n\n\t\tif ( options.transformGutter !== undefined ) {\n\t\t\tgrunt.log.error( \"Parameter `transformGutter` is no longer supported and defaults to `|`. See #71 for details.\" );\n\t\t}\n\n\t\t// normalize basePath\n\n\t\tif ( options.basePath.substr( -1 , 1 ) !== \"/\" && options.basePath.length > 0 ) {\n\t\t\toptions.basePath = options.basePath + \"/\";\n\t\t}\n\n\t\t// normalize content\n\n\t\tif ( mout.lang.isString( options.content ) ) {\n\t\t\toptions.content = grunt.file.readJSON( options.content );\n\t\t} else if ( mout.lang.isFunction( options.content ) ) {\n\t\t\toptions.content = options.content();\n\t\t} else {\n\t\t\toptions.content = options.content ? options.content : {};\n\t\t}\n\n\t\tif ( options.section ) {\n\n\t\t\tif ( ! options.content[ options.section ] ) {\n\t\t\t\tgrunt.log.error( \"content doesn't have section \" + options.section );\n\t\t\t}\n\n\t\t\toptions.content = options.content[ options.section ];\n\t\t}\n\n\t\t// =======================\n\t\t// -- DEFAULT PROCESSOR --\n\t\t// =======================\n\n\t\t// This process method is used when no process function is supplied.\n\t\tfunction defaultProcess( template, content ) {\n\t\t\treturn template.replace( options.parsePattern, function( match, inner ) {\n\t\t\t\tvar processed = processPlaceholder( inner, content );\n\n\t\t\t\tif ( processed === undefined ) {\n\t\t\t\t\tprocessed = ( ! options.removeUndefined ? match : \"\" );\n\t\t\t\t}\n\n\t\t\t\treturn processed;\n\t\t\t} );\n\t\t}\n\n\t\tif ( ! options.hasOwnProperty( \"process\" ) ) {\n\t\t\toptions.process = defaultProcess;\n\t\t}\n\n\t\tfunction processPlaceholder( placeholder, values ) {\n\t\t\t// extract transforms from placeholder\n\t\t\tvar transforms = placeholder.match( transformsRegex ).map( function( str ) {\n\n\t\t\t\t// remove whitespace, otherwise transforms and variable key may not be found\n\t\t\t\tstr = mout.string.trim( str );\n\n\t\t\t\t// extract name of transform and transform parameters, and clear quotes\n\t\t\t\tvar parts = str.match( paramsRegex ).map( function( str ) {\n\t\t\t\t\treturn mout.string.trim( str, \"'\" );\n\t\t\t\t});\n\n\t\t\t\treturn {\n\t\t\t\t\tname: parts[0],\n\t\t\t\t\tparams: parts.slice(1)\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// the first value is the set that contains our variable key, and not a transfrom\n\t\t\tvar key = transforms.shift().name;\n\t\t\tvar resolved = resolveName( key, values );\n\n\t\t\treturn transforms.reduce( applyTransform, resolved );\n\t\t}\n\n\t\tfunction applyTransform( content, transform ) {\n\t\t\tvar name = transform.name;\n\n\t\t\tif( content === undefined ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// check if transform is registred\n\t\t\tif( ! mout.object.has( options.transforms, name ) ) {\n\t\t\t\tgrunt.log.error( \"Unknown transform: \" + name );\n\n\t\t\t\treturn content;\n\t\t\t}\n\n\t\t\t// check if transform is valid callback\n\t\t\tif( ! mout.lang.isFunction( options.transforms[ name ] ) ) {\n\t\t\t\tgrunt.log.error( \"Transform is not a function: \" + name );\n\n\t\t\t\treturn content;\n\t\t\t}\n\n\t\t\t// apply transform, handler is calles with signature ( variableContent, param1, param2, ..., paramN )\n\t\t\treturn options.transforms[ name ].apply( null, [ content ].concat( transform.params ) );\n\t\t}\n\n\t\t// ===========\n\t\t// -- UTILS --\n\t\t// ===========\n\n\t\t// Regex to parse bake tags. Retuns linebreak, indent, type, and signature\n\n\t\tvar regex = /(\\n?)([ \\t]*)<!--\\(\\s?bake(-start|-end)?([\\S\\s]*?)\\)-->/;\n\n\t\t// Regex to parse attributes.\n\n\t\tvar attributesRegex = /([\\S_]+)=\"([^\"]+)\"/g;\n\n\t\t// Regex to parse transforms including their parameters from placeholders\n\n\t\tvar transformsRegex = /(?:'[^']*'|[^\\|])+/g;\n\n\t\t// Regex to parse parameters from transforms\n\n\t\tvar paramsRegex = /(?:'[^']*'|[^:])+/g;\n\n\t\t// Regex to detect array syntax.\n\n\t\tvar arrayRegex = /\\[([\\w\\.\\,\\-]*)\\]/;\n\n\t\t// Regex to detect includePath / attributes in signature\n\n\t\tvar signatureRegex = /^((?!_\\S+=)[^\\s]+)\\s?([\\S\\s]*)$/;\n\n\t\t// Regex to serach for variable names\n\n\t\tvar ifRegex = /([a-z_$][0-9a-z_$@\\.]*)|(?:\"([^\"]*)\")|(?:'([^']*)')/gi;\n\n\t\t// Method to check wether file exists and warn if not.\n\n\t\tfunction checkFile( src ) {\n\t\t\tif ( ! grunt.file.exists( src ) ) {\n\t\t\t\tgrunt.log.error( \"Source file \\\"\" + src + \"\\\" not fount.\" );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Returns the directory path from a file path\n\n\t\tfunction directory( path ) {\n\t\t\tvar segments = path.split( \"/\" );\n\n\t\t\tsegments.pop();\n\n\t\t\treturn segments.join( \"/\" );\n\t\t}\n\n\t\t// Returns the filename from a file path\n\n\t\tfunction filename( path ) {\n\t\t\treturn path.split( \"/\" ).pop();\n\t\t}\n\n\t\t// Parses attribute string.\n\n\t\tfunction parseInlineValues( string ) {\n\t\t\tvar match;\n\t\t\tvar values = {};\n\n\t\t\twhile( match = attributesRegex.exec( string ) ) {\n\t\t\t\tvalues[ match[ 1 ] ] = match[ 2 ];\n\t\t\t}\n\n\t\t\treturn values;\n\t\t}\n\n\t\t// Parses a bake call signature (extract filepath and arguments)\n\n\t\tfunction parseSignature( signature ) {\n\t\t\tvar match;\n\t\t\tvar result;\n\n\t\t\t// trim whitespace from signature otherwise reqular expression test may fail\n\t\t\tsignature = signature.trim();\n\n\t\t\tif( match = signatureRegex.exec( signature ) ) {\n\t\t\t\tresult = {\n\t\t\t\t\tincludePath: match[ 1 ],\n\t\t\t\t\tattributes: match[ 2 ],\n\t\t\t\t\tsignature: signature\n\t\t\t\t};\n\n\t\t\t} else {\n\t\t\t\tresult = {\n\t\t\t\t\tincludePath: \"\",\n\t\t\t\t\tattributes: signature,\n\t\t\t\t\tsignature: signature\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\t// Helper method to resolve nested placeholder names like: \"home.footer.text\"\n\n\t\tfunction resolveName( name, values ) {\n\t\t\tname = String( name ).replace( /\\[([^\\]]+)\\]/g, function( match, inner ) {\n\t\t\t\treturn \".\" + resolveName( inner, values );\n\t\t\t});\n\n\t\t\treturn mout.object.get( values, name );\n\t\t}\n\n\n\t\t// Helper method to apply indent\n\n\t\tfunction applyIndent( indent, content ) {\n\t\t\tif ( ! indent || indent.length < 1 ) {\n\t\t\t\treturn content;\n\t\t\t}\n\n\t\t\treturn content\n\t\t\t\t.split( \"\\n\" )\n\t\t\t\t.map( function( line ) {\n\t\t\t\t\t// do not indent empty lines\n\t\t\t\t\treturn line.trim() !== \"\" ? ( indent + line ) : \"\";\n\t\t\t\t} )\n\t\t\t\t.join( \"\\n\" );\n\t\t}\n\n\n\t\t// Helper to either find values from JSON or inline values\n\n\t\tfunction getArrayValues( string, values ) {\n\n\t\t\tstring = string.split( \" \" ).join( \"\" );\n\n\t\t\tif ( arrayRegex.test( string ) )\n\t\t\t\treturn string.match( arrayRegex )[ 1 ].split( \",\" );\n\n\t\t\telse {\n\t\t\t\tvar array = processPlaceholder( string, values );\n\t\t\t\tif ( ! mout.lang.isArray( array ) ) array = [];\n\n\t\t\t\treturn array;\n\t\t\t}\n\n\t\t}\n\n\t\t// Handle _if attributes in inline arguments\n\n\t\tfunction validateIf( inlineValues, values ) {\n\n\t\t\tif ( \"_if\" in inlineValues ) {\n\n\t\t\t\tvar value = inlineValues[ \"_if\" ];\n\t\t\t\tdelete inlineValues[ \"_if\" ];\n\n\t\t\t\tvar params = {};\n\n\t\t\t\tvar condition = value.replace( ifRegex, function( match, varname ) {\n\t\t\t\t\tif( ! varname ) return match;\n\n\t\t\t\t\tvar resolved = resolveName( varname, values );\n\n\t\t\t\t\t// check for semantic falsy values\n\t\t\t\t\tif ( options.semanticIf === true ) {\n\t\t\t\t\t\tresolved = [ \"no\", \"off\" ].indexOf( resolved ) === -1;\n\n\t\t\t\t\t} else if ( mout.lang.isArray( options.semanticIf ) ) {\n\t\t\t\t\t\tresolved = options.semanticIf.indexOf( resolved ) === -1;\n\n\t\t\t\t\t} else if ( mout.lang.isFunction( options.semanticIf ) ) {\n\t\t\t\t\t\tresolved = options.semanticIf( resolved );\n\t\t\t\t\t}\n\n\t\t\t\t\tparams[ varname ] = resolved;\n\n\t\t\t\t\treturn \"params['\" + varname + \"']\";\n\t\t\t\t});\n\n\t\t\t\ttry {\n\t\t\t\t\t/* jshint evil:true */\n\t\t\t\t\t/* eslint-disable no-eval */\n\n\t\t\t\t\treturn ! eval( condition );\n\n\t\t\t\t} catch( e ) {\n\t\t\t\t\tgrunt.log.error( \"Invalid if condition: '\" + value + \"'\" );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\n\t\t// Handle _render attributes in inline arguments\n\n\t\tfunction validateRender( inlineValues ) {\n\t\t\tif ( \"_render\" in inlineValues ) {\n\n\t\t\t\tvar skipValue = inlineValues[ \"_render\" ];\n\n\t\t\t\tif ( skipValue in options ) {\n\t\t\t\t\treturn ! options[ skipValue ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\n\t\t// Handle _section attributes in inline arguments\n\n\t\tfunction validateSection( inlineValues ) {\n\t\t\tif ( \"_section\" in inlineValues ) {\n\n\t\t\t\tvar value = inlineValues[ \"_section\" ];\n\t\t\t\tdelete inlineValues[ \"_section\" ];\n\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\n\t\t// Handle _foreach attributes in inline arguments\n\n\t\tfunction validateForEach( inlineValues, values, array ) {\n\n\t\t\tif ( \"_foreach\" in inlineValues ) {\n\n\t\t\t\tvar set = inlineValues[ \"_foreach\" ].split( \":\" );\n\t\t\t\tdelete inlineValues[ \"_foreach\" ];\n\n\t\t\t\t// as transforms may contain colons, join rest of list to recreate original string\n\t\t\t\tgetArrayValues( set.slice(1).join( \":\" ), values ).forEach( function( value ) {\n\t\t\t\t\tarray.push( value );\n\t\t\t\t} );\n\n\t\t\t\treturn set[ 0 ];\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\t// Handle _bake attributes in inline arguments\n\n\t\tfunction validateBake( inlineValues ) {\n\t\t\tif ( \"_bake\" in inlineValues ) {\n\n\t\t\t\tvar signature = inlineValues[ \"_bake\" ];\n\t\t\t\tdelete inlineValues[ \"_bake\" ];\n\n\t\t\t\tvar set = signature.split( \">\", 2 );\n\n\t\t\t\treturn {\n\t\t\t\t\tsrc: mout.string.trim( set[0] ),\n\t\t\t\t\tdest: mout.string.trim( set[1] )\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\t// Handle _assign attributes in inline arguments\n\n\t\tfunction validateAssign( inlineValues ) {\n\t\t\tif ( \"_assign\" in inlineValues ) {\n\n\t\t\t\tvar value = inlineValues[ \"_assign\" ];\n\t\t\t\tdelete inlineValues[ \"_assign\" ];\n\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\t// Handle _process attributes in inline arguments\n\n\t\tfunction validateProcess( inlineValues ) {\n\t\t\tif ( \"_process\" in inlineValues ) {\n\n\t\t\t\tvar value = inlineValues[ \"_process\" ];\n\t\t\t\tdelete inlineValues[ \"_process\" ];\n\n\t\t\t\treturn String(value).toLowerCase() === 'true' ;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tfunction preparePath( includePath, filePath, values ) {\n\n\t\t\t// replace placeholders within the include path\n\t\t\tincludePath = processContent( includePath, values );\n\n\t\t\tif ( includePath[ 0 ] === \"/\" )\n\t\t\t\treturn options.basePath + includePath.substr( 1 );\n\t\t\telse return directory( filePath ) + \"/\" + includePath;\n\t\t}\n\n\t\tfunction processExtraBake( bake, filePath, destFile, values ) {\n\t\t\tif( bake === null ) return;\n\n\t\t\tvar src = preparePath( bake.src, filePath, values );\n\t\t\tvar dest = preparePath( bake.dest, destFile, values );\n\n\t\t\t// inject variable to link to dynamically processed file\n\t\t\tvalues[ \"@link\" ] = processContent( bake.dest, values );\n\n\t\t\t// compute the depth of the destination path\n\t\t\tvar parentDirsCount = bake.dest.split( \"/\" ).length - 1;\n\n\t\t\t// create a prefix for building a link to parent folder\n\t\t\tvar parentDirsString = new Array( parentDirsCount + 1 ).join( \"../\" );\n\n\t\t\t// inject variable to link to file that triggered the dynamic creation, from dynamically processed file\n\t\t\tvalues[ \"@referrer\" ] = parentDirsString + filename( destFile );\n\n\t\t\tbakeFile( src, dest, values );\n\t\t}\n\n\t\tfunction replaceFile( linebreak, indent, includePath, attributes, filePath, destFile, values ) {\n\t\t\tincludePath = preparePath( includePath, filePath, values );\n\n\t\t\tvar includeContent = grunt.file.read( includePath );\n\n\t\t\treturn replaceString( includeContent, linebreak, indent, includePath, attributes, filePath, destFile, values );\n\t\t}\n\n\t\tfunction replaceString( includeContent, linebreak, indent, includePath, attributes, filePath, destFile, parentValues ) {\n\t\t\tvar values = parentValues;\n\t\t\tvar inlineValues = parseInlineValues( attributes );\n\t\t\tvar section = validateSection( inlineValues, values );\n\t\t\tvar extraBake = validateBake( inlineValues );\n\t\t\tvar assign = validateAssign( inlineValues );\n\t\t\tvar doProcess = validateProcess( inlineValues );\n\n\t\t\tif ( section !== null ) {\n\t\t\t\tvalues = mout.object.get( parentValues, section );\n\t\t\t}\n\n\t\t\t// resolve placeholders within inline values so these can be used in subsequent grunt-tags (see #67)\n\t\t\tinlineValues = mout.object.map( inlineValues, function( value ) {\n\t\t\t\treturn processContent( value, values );\n\t\t\t} );\n\n\t\t\tif ( validateIf( inlineValues, values ) ) return \"\";\n\t\t\tif ( validateRender( inlineValues ) ) return \"\";\n\t\t\tvar forEachValues = [];\n\t\t\tvar forEachName = validateForEach( inlineValues, values, forEachValues );\n\n\t\t\tvalues = mout.object.merge( values, inlineValues );\n\n\t\t\tincludeContent = applyIndent( indent, includeContent);\n\n\t\t\tvar content = \"\"; // result of current bake-section\n\n\t\t\tif( !doProcess ) {\n\t\t\t\tcontent = linebreak + includeContent;\n\n\t\t\t} else if ( forEachName && forEachValues.length > 0 ) {\n\n\t\t\t\tvar fragment = \"\";\n\t\t\t\tvar oldValue = values[ forEachName ];\n\t\t\t\tvar total = forEachValues.length;\n\n\n\t\t\t\tforEachValues.forEach( function( value, index ) {\n\t\t\t\t\tvalues[ forEachName ] = value;\n\n\t\t\t\t\t// assign meta vars with information about current iteration\n\t\t\t\t\tvalues[ forEachName + \"@index\" ] = index;\n\t\t\t\t\tvalues[ forEachName + \"@iteration\" ] = index + 1;\n\t\t\t\t\tvalues[ forEachName + \"@first\" ] = ( index === 0 );\n\t\t\t\t\tvalues[ forEachName + \"@last\" ] = ( ( total - 1 ) === index );\n\t\t\t\t\tvalues[ forEachName + \"@total\" ] = total;\n\n\t\t\t\t\tprocessExtraBake( extraBake, filePath, destFile, values );\n\n\t\t\t\t\tfragment += linebreak + processContent( parse( includeContent, includePath, destFile, values ), values );\n\t\t\t\t} );\n\n\t\t\t\tif ( oldValue === undefined ) values[ forEachName ] = oldValue;\n\t\t\t\telse delete values[ forEachName ];\n\n\t\t\t\tcontent = fragment;\n\n\t\t\t} else if( !forEachName ) {\n\n\t\t\t\tprocessExtraBake( extraBake, filePath, destFile, values );\n\n\t\t\t\tcontent = linebreak + parse( includeContent, includePath, destFile, values );\n\n\t\t\t} else {\n\n\t\t\t\tcontent = \"\";\n\t\t\t}\n\n\t\t\tif( assign !== null ) {\n\t\t\t\tparentValues[ assign ] = mout.string.ltrim( content );\n\n\t\t\t\tcontent = \"\";\n\t\t\t}\n\n\t\t\treturn content;\n\t\t}\n\n\t\t// =====================\n\t\t// -- RECURSIVE PARSE --\n\t\t// =====================\n\n\t\t// extract bake sections.\n\t\t// For inline-bake it searches for matching closing tags and returns inline content and other information\n\n\t\tfunction extractSection( content ) {\n\t\t\tvar depth = 0;\t\t\t// tracks how difference between found opening and closing tags\n\t\t\tvar start = 0;\t\t\t// character position in `content` where inner-content starts\n\t\t\tvar position = 0;\t\t// current character position within _original_ content\n\t\t\tvar length = 0;\t\t\t// length section (= spacing plus bake-tag) we currently evaluate\n\t\t\tvar remain = content;\t// content left for further extraction\n\t\t\tvar section = {};\n\n\t\t\tdo {\n\n\t\t\t\tvar result = remain.match( regex );\n\n\t\t\t\tif( ! result ) break;\n\n\t\t\t\tlength = result[ 0 ].length;\n\t\t\t\tposition += result.index;\n\n\t\t\t\tif( depth === 0 ) {\n\n\t\t\t\t\tstart = position + length;\n\n\t\t\t\t\tsection = mout.object.merge( section, parseSignature( result[ 4 ] ), {\n\t\t\t\t\t\tbefore: content.slice( 0, position ),\n\t\t\t\t\t\tlinebreak: result[ 1 ],\n\t\t\t\t\t\tindent: result[ 2 ]\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tremain = remain.slice( result.index + length );\n\n\t\t\t\tdepth += ( result[ 3 ] === \"-start\" );\n\t\t\t\tdepth -= ( result[ 3 ] === \"-end\" );\n\n\t\t\t\tif( depth === 0 ) {\n\t\t\t\t\treturn mout.object.merge( section, {\n\t\t\t\t\t\tinner: content.slice( start, position ),\n\t\t\t\t\t\tafter: content.slice( position + length )\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tposition += length;\n\n\t\t\t} while( true );\n\n\t\t\treturn null;\n\t\t}\n\n\n\t\t// Recursivly search for bake-tags and create one file.\n\n\t\tfunction parse( fileContent, filePath, destFile, values ) {\n\n\t\t\tvar section = extractSection( fileContent );\n\n\t\t\tif( section ) {\n\t\t\t\tfileContent = processContent( section.before, values );\n\n\t\t\t\tif( section.inner ) {\n\t\t\t\t\tfileContent += replaceString( section.inner, \"\", \"\", filePath, section.attributes, filePath, destFile, values );\n\n\t\t\t\t} else if( section.includePath ) {\n\t\t\t\t\tfileContent += replaceFile( section.linebreak, section.indent, section.includePath, section.attributes, filePath, destFile, values );\n\t\t\t\t}\n\n\t\t\t\tfileContent += parse( section.after, filePath, destFile, values );\n\n\t\t\t} else {\n\t\t\t\treturn processContent( fileContent, values );\n\t\t\t}\n\n\t\t\treturn fileContent;\n\t\t}\n\n\t\t// Run process function if processor-function is defined\n\n\t\tfunction processContent( content, values ) {\n\t\t\treturn mout.lang.isFunction( options.process ) ? options.process( content, values ) : content;\n\t\t}\n\n\t\t// ==========\n\t\t// -- BAKE --\n\t\t// ==========\n\n\t\tfunction bakeFile( src, dest, content ) {\n\n\t\t\tvar srcContent = grunt.file.read( src );\n\t\t\tvar destContent = parse( srcContent, src, dest, content );\n\n\t\t\tgrunt.file.write( dest, destContent );\n\t\t\tgrunt.log.ok( \"File \\\"\" + dest + \"\\\" created.\" );\n\t\t}\n\n\t\t// Loop over files and create baked files.\n\n\t\tthis.files.forEach( function( file ) {\n\n\t\t\tvar src = file.src[ 0 ];\n\t\t\tvar dest = file.dest;\n\n\t\t\tif ( ! checkFile( src ) ) return;\n\n\t\t\tvar content = mout.object.merge( options.content, {\n\t\t\t\t__bake: {\n\t\t\t\t\tfilename: src,\n\t\t\t\t\tsrcFilename: src,\n\t\t\t\t\tdestFilename: dest,\n\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tbakeFile( src, dest, content );\n\t\t} );\n\t} );\n};\n"}